"use strict";(self.webpackChunksm_docs=self.webpackChunksm_docs||[]).push([[6059],{3905:(t,e,l)=>{l.d(e,{Zo:()=>c,kt:()=>g});var n=l(7294);function r(t,e,l){return e in t?Object.defineProperty(t,e,{value:l,enumerable:!0,configurable:!0,writable:!0}):t[e]=l,t}function a(t,e){var l=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),l.push.apply(l,n)}return l}function i(t){for(var e=1;e<arguments.length;e++){var l=null!=arguments[e]?arguments[e]:{};e%2?a(Object(l),!0).forEach((function(e){r(t,e,l[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(l)):a(Object(l)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(l,e))}))}return t}function o(t,e){if(null==t)return{};var l,n,r=function(t,e){if(null==t)return{};var l,n,r={},a=Object.keys(t);for(n=0;n<a.length;n++)l=a[n],e.indexOf(l)>=0||(r[l]=t[l]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)l=a[n],e.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(t,l)&&(r[l]=t[l])}return r}var u=n.createContext({}),s=function(t){var e=n.useContext(u),l=e;return t&&(l="function"==typeof t?t(e):i(i({},e),t)),l},c=function(t){var e=s(t.components);return n.createElement(u.Provider,{value:e},t.children)},k="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var l=t.components,r=t.mdxType,a=t.originalType,u=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),k=s(l),m=r,g=k["".concat(u,".").concat(m)]||k[m]||p[m]||a;return l?n.createElement(g,i(i({ref:e},c),{},{components:l})):n.createElement(g,i({ref:e},c))}));function g(t,e){var l=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=l.length,i=new Array(a);i[0]=m;var o={};for(var u in e)hasOwnProperty.call(e,u)&&(o[u]=e[u]);o.originalType=t,o[k]="string"==typeof t?t:r,i[1]=o;for(var s=2;s<a;s++)i[s]=l[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,l)}m.displayName="MDXCreateElement"},9786:(t,e,l)=>{l.r(e),l.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var n=l(7462),r=(l(7294),l(3905));const a={sidebar_position:3,title:"sm.ai",hide_title:!0,"sidebar-label":"sm.ai"},i=void 0,o={unversionedId:"Game-Script-Environment/Static-Functions/sm.ai",id:"Game-Script-Environment/Static-Functions/sm.ai",title:"sm.ai",description:"sm.ai",source:"@site/docs/Game-Script-Environment/Static-Functions/sm.ai.md",sourceDirName:"Game-Script-Environment/Static-Functions",slug:"/Game-Script-Environment/Static-Functions/sm.ai",permalink:"/docs/Game-Script-Environment/Static-Functions/sm.ai",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Game-Script-Environment/Static-Functions/sm.ai.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"sm.ai",hide_title:!0,"sidebar-label":"sm.ai"},sidebar:"tutorialSidebar",previous:{title:"sm",permalink:"/docs/Game-Script-Environment/Static-Functions/sm"},next:{title:"sm.areaTrigger",permalink:"/docs/Game-Script-Environment/Static-Functions/sm.areaTrigger"}},u={},s=[{value:"sm.ai",id:"smai",level:2},{value:"Functions",id:"functions",level:2},{value:"directPathAvailable",id:"directpathavailable",level:3},{value:"getAimPosition",id:"getaimposition",level:3},{value:"getBreachablePosition",id:"getbreachableposition",level:3},{value:"getClosestTree",id:"getclosesttree",level:3},{value:"getClosestVisibleCharacterType",id:"getclosestvisiblecharactertype",level:3},{value:"getClosestVisibleCrop",id:"getclosestvisiblecrop",level:3},{value:"getClosestVisiblePlayerCharacter",id:"getclosestvisibleplayercharacter",level:3},{value:"getClosestVisibleTeamOpponent",id:"getclosestvisibleteamopponent",level:3},{value:"getRandomCreationPosition",id:"getrandomcreationposition",level:3},{value:"isReachable",id:"isreachable",level:3}],c={toc:s},k="wrapper";function p(t){let{components:e,...l}=t;return(0,r.kt)(k,(0,n.Z)({},c,l,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"smai"},"sm.ai"),(0,r.kt)("p",null,"AI utility functions."),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"directpathavailable"},"directPathAvailable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.ai.directPathAvailable( unit, position )\n")),(0,r.kt)("p",null,"Checks if the unit can reach the target position by moving straight."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"unit")," [",(0,r.kt)("strong",null," unit "),"]: The unit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"position")," [",(0,r.kt)("strong",null," vec3 "),"]: The target position.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," bool "),"]",": Whether the target position is directly reachable or not.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getaimposition"},"getAimPosition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.ai.getAimPosition( character, target, range, width )\n")),(0,r.kt)("p",null,"Returns true if the character can fire at the target within a given fire lane."),(0,r.kt)("p",null,"Also returns the aim position that allows the character to succeed."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"character")," [",(0,r.kt)("strong",null," character "),"]: The firing character."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"target")," [",(0,r.kt)("strong",null," harvestable/character "),"]: The target."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"range")," [",(0,r.kt)("strong",null," number "),"]: The maximum firing distance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"width")," [",(0,r.kt)("strong",null," number "),"]: The width of the fire lane.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," bool "),"]",": Whether the character can fire at the target or not."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," vec3 "),"]",": The aim position, if available.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getbreachableposition"},"getBreachablePosition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.ai.getBreachablePosition( unit, position, range, attack )\n")),(0,r.kt)("p",null,"Check if there's an attackable object between the unit and a position."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"unit")," [",(0,r.kt)("strong",null," unit "),"]: The unit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"position")," [",(0,r.kt)("strong",null," vec3 "),"]: The target position."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"range")," [",(0,r.kt)("strong",null," number "),"]: The distance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"attack")," [",(0,r.kt)("strong",null," int "),"]: The possible attack level from the attacker.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," bool "),"]",": True if a breachable object was found or no object was found. False if the found object is unbreachable."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," vec3 "),"]",": The attackable position, if found."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," shape/harvestable/lift "),"]",": The object to attack.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getclosesttree"},"getClosestTree"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.ai.getClosestTree( position, world )\n")),(0,r.kt)("p",null,'Find the closest "tree" harvestable in a world.'),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"position")," [",(0,r.kt)("strong",null," vec3 "),"]: The position."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"world")," [",(0,r.kt)("strong",null," world "),"]: The world.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," harvestable "),"]",": The closest found tree.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getclosestvisiblecharactertype"},"getClosestVisibleCharacterType"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.ai.getClosestVisibleCharacterType( unit, uuid )\n")),(0,r.kt)("p",null,"Returns the closest visible character with matching uuid."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"unit")," [",(0,r.kt)("strong",null," unit "),"]: The unit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"uuid")," [",(0,r.kt)("strong",null," uuid "),"]: The character uuid.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," character "),"]",": The closest visible character.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getclosestvisiblecrop"},"getClosestVisibleCrop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.ai.getClosestVisibleCrop( unit )\n")),(0,r.kt)("p",null,"Returns the closest visible farming harvestable."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"unit")," [",(0,r.kt)("strong",null," unit "),"]: The unit.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," harvestable "),"]",": The closest visible farming harvestable.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getclosestvisibleplayercharacter"},"getClosestVisiblePlayerCharacter"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.ai.getClosestVisiblePlayerCharacter( unit )\n")),(0,r.kt)("p",null,"Returns the closest visible player character."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"unit")," [",(0,r.kt)("strong",null," unit "),"]: The unit.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," character "),"]",": The closest visible player character.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getclosestvisibleteamopponent"},"getClosestVisibleTeamOpponent"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.ai.getClosestVisibleTeamOpponent( unit, color )\n")),(0,r.kt)("p",null,"Returns the closest visible character that does not have the given color."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"unit")," [",(0,r.kt)("strong",null," unit "),"]: The unit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"color")," [",(0,r.kt)("strong",null," color "),"]: The color.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," character "),"]",": The closest visible team opponent.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getrandomcreationposition"},"getRandomCreationPosition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.ai.getRandomCreationPosition( body )\n")),(0,r.kt)("p",null,"Returns a random position on the given body."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"body")," [",(0,r.kt)("strong",null," body "),"]: The body.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," vec3 "),"]",": The random position.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"isreachable"},"isReachable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.ai.isReachable( unit, position )\n")),(0,r.kt)("p",null,"Check if the unit can reach the target position by moving along a path."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"unit")," [",(0,r.kt)("strong",null," unit "),"]: The unit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"position")," [",(0,r.kt)("strong",null," vec3 "),"]: The target position.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," bool "),"]",": Whether the position is reachable or not.")),(0,r.kt)("hr",null))}p.isMDXComponent=!0}}]);