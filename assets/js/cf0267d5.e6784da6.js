"use strict";(self.webpackChunksm_docs=self.webpackChunksm_docs||[]).push([[2735],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(n),h=l,k=p["".concat(c,".").concat(h)]||p[h]||m[h]||r;return n?a.createElement(k,o(o({ref:t},u),{},{components:n})):a.createElement(k,o({ref:t},u))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3626:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=n(7462),l=(n(7294),n(3905));const r={sidebar_position:2,title:"ShapeClass",hide_title:!0,"sidebar-label":"ShapeClass"},o=void 0,i={unversionedId:"Game-Script-Environment/Classes/ShapeClass",id:"Game-Script-Environment/Classes/ShapeClass",title:"ShapeClass",description:"ShapeClass",source:"@site/docs/Game-Script-Environment/Classes/ShapeClass.md",sourceDirName:"Game-Script-Environment/Classes",slug:"/Game-Script-Environment/Classes/ShapeClass",permalink:"/docs/Game-Script-Environment/Classes/ShapeClass",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Game-Script-Environment/Classes/ShapeClass.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"ShapeClass",hide_title:!0,"sidebar-label":"ShapeClass"},sidebar:"tutorialSidebar",previous:{title:"Common Callbacks",permalink:"/docs/Game-Script-Environment/Classes/CommonCallbacks"},next:{title:"ToolClass",permalink:"/docs/Game-Script-Environment/Classes/ToolClass"}},c={},s=[{value:"ShapeClass",id:"shapeclass",level:3},{value:"Server + Client",id:"server--client",level:2},{value:"onProjectile",id:"onprojectile",level:3},{value:"onMelee",id:"onmelee",level:3},{value:"onCollision",id:"oncollision",level:3},{value:"canErase",id:"canerase",level:3},{value:"Server-only",id:"server-only",level:2},{value:"onUnload",id:"onunload",level:3},{value:"onExplosion",id:"onexplosion",level:3},{value:"onSledgehammer",id:"onsledgehammer",level:3},{value:"Client-only",id:"client-only",level:2},{value:"onInteract",id:"oninteract",level:3},{value:"canInteract",id:"caninteract",level:3},{value:"onTinker",id:"ontinker",level:3},{value:"canTinker",id:"cantinker",level:3},{value:"onInteractThroughJoint",id:"oninteractthroughjoint",level:3},{value:"canInteractThroughJoint",id:"caninteractthroughjoint",level:3},{value:"onAction",id:"onaction",level:3},{value:"canCarry",id:"cancarry",level:3},{value:"getAvailableParentConnectionCount",id:"getavailableparentconnectioncount",level:3},{value:"getAvailableChildConnectionCount",id:"getavailablechildconnectioncount",level:3}],u={toc:s},p="wrapper";function m(e){let{components:t,...n}=e;return(0,l.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"shapeclass"},"ShapeClass"),(0,l.kt)("p",null,'A script class that is instanced for every "scripted" ',(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable Shape")," in the game."),(0,l.kt)("p",null,"An interactable part is a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Shape"},"Shape")," that is usually built by the player and can be interacted with, for example a button or an engine."),(0,l.kt)("p",null,"The class can receive events sent with ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Static-Functions/sm.event#sendtointeractable"},"sm.event.sendToInteractable"),"."),(0,l.kt)("p",null,"The fields below are accessed using ",(0,l.kt)("code",null,"self.fieldName")," in the ShapeClass script:"),(0,l.kt)("strong",null,"Fields:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")),(0,l.kt)("td",{parentName:"tr",align:null},"interactable"),(0,l.kt)("td",{parentName:"tr",align:null},"The ",(0,l.kt)("a",{parentName:"td",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," game object belonging to this class instance. The same as ",(0,l.kt)("code",null,"shape.interactable"),".")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/Game-Script-Environment/Userdata/Shape"},"Shape")),(0,l.kt)("td",{parentName:"tr",align:null},"shape"),(0,l.kt)("td",{parentName:"tr",align:null},"The ",(0,l.kt)("a",{parentName:"td",href:"/docs/Game-Script-Environment/Userdata/Shape"},"Shape")," game object that the ",(0,l.kt)("a",{parentName:"td",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," is attached to. (The same as interactable.shape)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/Game-Script-Environment/Userdata/Network"},"Network")),(0,l.kt)("td",{parentName:"tr",align:null},"network"),(0,l.kt)("td",{parentName:"tr",align:null},"A ",(0,l.kt)("a",{parentName:"td",href:"/docs/Game-Script-Environment/Userdata/Network"},"Network")," object that can be used to send data between client and server.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"/docs/Game-Script-Environment/Userdata/Storage"},"Storage")),(0,l.kt)("td",{parentName:"tr",align:null},"storage"),(0,l.kt)("td",{parentName:"tr",align:null},"A server-side ",(0,l.kt)("a",{parentName:"td",href:"/docs/Game-Script-Environment/Userdata/Storage"},"Storage")," object that can be used to save and load data to/from the world database.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"any"),(0,l.kt)("td",{parentName:"tr",align:null},"data"),(0,l.kt)("td",{parentName:"tr",align:null},"Data from the ",(0,l.kt)("code",null,"data")," entry in the shape's JSON file entry.")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"any"),(0,l.kt)("td",{parentName:"tr",align:null},"params"),(0,l.kt)("td",{parentName:"tr",align:null},"Parameter set with ",(0,l.kt)("a",{parentName:"td",href:"/docs/Game-Script-Environment/Userdata/Interactable#setparams"},"Interactable:setParams")," when created from a script.")))),(0,l.kt)("strong",null,"Constants:")," ",(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#shapeclass"},"colorHighlight")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#shapeclass"},"colorNormal")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#shapeclass"},"connectionInput")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#shapeclass"},"connectionOutput")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#shapeclass"},"maxChildCount")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#shapeclass"},"maxParentCount")," ",(0,l.kt)("br",null),"\n",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#shapeclass"},"poseWeightCount")," ",(0,l.kt)("br",null)),(0,l.kt)("strong",null,"Callbacks:")," ",(0,l.kt)("br",null),(0,l.kt)("h2",{id:"server--client"},"Server + Client"),(0,l.kt)("h3",{id:"onprojectile"},"onProjectile"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.server_onProjectile( self, position, airTime, velocity, projectileName, shooter, damage, customData, normal, uuid )\nend\nfunction ShapeClass.client_onProjectile( self, position, airTime, velocity, projectileName, shooter, damage, customData, normal, uuid )\nend\n")),(0,l.kt)("p",null,"Called when the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Shape"},"Shape")," is hit by a projectile."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"If the shooter is destroyed before the projectile hits, the shooter value will be nil.")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"position")," [",(0,l.kt)("strong",null," vec3 "),"]: The position in world space where the projectile hit the Shape."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"airTime")," [",(0,l.kt)("strong",null," number "),"]: The time, in seconds, that the projectile spent flying before the hit."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"velocity")," [",(0,l.kt)("strong",null," vec3 "),"]: The velocity of the projectile at impact."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"projectileName")," [",(0,l.kt)("strong",null," string "),"]: The name of the projectile. (Legacy, use uuid instead)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"shooter")," [",(0,l.kt)("strong",null," player/unit/shape/harvestable/nil "),"]: The shooter. Can be a Player, Unit, Shape, Harvestable or nil if unknown."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"damage")," [",(0,l.kt)("strong",null," int "),"]: The damage value of the projectile."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"customData")," [",(0,l.kt)("strong",null," any "),"]: A Lua object that can be defined at shoot time using ",(0,l.kt)("code",null,"sm.projectile.customProjectileAttack")," or any other custom version."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"normal")," [",(0,l.kt)("strong",null," vec3 "),"]: The normal at the point of impact."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"uuid")," [",(0,l.kt)("strong",null," uuid "),"]: The uuid of the projectile.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"onmelee"},"onMelee"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.server_onMelee( self, position, attacker, damage, power, direction, normal )\nend\nfunction ShapeClass.client_onMelee( self, position, attacker, damage, power, direction, normal )\nend\n")),(0,l.kt)("p",null,"Called when the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Shape"},"Shape")," is hit by a melee attack."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"If the attacker is destroyed before the hit lands, the attacker value will be nil.")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"position")," [",(0,l.kt)("strong",null," vec3 "),"]: The position in world space where the Shape was hit."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"attacker")," [",(0,l.kt)("strong",null," player/nil "),"]: The attacker. Can be a Player or nil if unknown. Attacks made by a Unit will be nil on the client."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"damage")," [",(0,l.kt)("strong",null," int "),"]: The damage value of the melee hit."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"power")," [",(0,l.kt)("strong",null," number "),"]: The physical impact of the hit."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"direction")," [",(0,l.kt)("strong",null," vec3 "),"]: The direction of the melee attack."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"normal")," [",(0,l.kt)("strong",null," vec3 "),"]: The normal at the point of impact.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"oncollision"},"onCollision"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.server_onCollision( self, other, position, selfPointVelocity, otherPointVelocity, normal )\nend\nfunction ShapeClass.client_onCollision( self, other, position, selfPointVelocity, otherPointVelocity, normal )\nend\n")),(0,l.kt)("p",null,"Called when the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Shape"},"Shape")," collides with another object."),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"other")," [",(0,l.kt)("strong",null," shape/character/harvestable/lift/nil "),"]: The other object. Nil if terrain."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"position")," [",(0,l.kt)("strong",null," player/nil "),"]: The position in world space where the collision occurred."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"selfPointVelocity")," [",(0,l.kt)("strong",null," int "),"]: The velocity that that the Shape had at the point of collision."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"otherPointVelocity")," [",(0,l.kt)("strong",null," number "),"]: The velocity that that the other object had at the point of collision."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"normal")," [",(0,l.kt)("strong",null," vec3 "),"]: The collision normal between the Shape and the other object.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"canerase"},"canErase"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.server_canErase( self )\n    return true --true or false, default true\nend\nfunction ShapeClass.client_canErase( self )\n    return true --true or false, default true\nend\n")),(0,l.kt)("p",null,"Called to check whether the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Shape"},"Shape")," can be erased at this moment."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"This can be used to override restrictions. (See ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Shape"},"Shape.erasable"),")")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance.")),(0,l.kt)("strong",null,"Returns:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"[",(0,l.kt)("strong",null," bool "),"]",": A boolean indicating whether the Shape can be erased or not. (Defaults to true)")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"server-only"},"Server-only"),(0,l.kt)("h3",{id:"onunload"},"onUnload"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.server_onUnload( self )\nend\n")),(0,l.kt)("p",null,"Called when the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," is unloaded from the game because no ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Player"},"Player"),"'s ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Character"},"Character")," is close enough to it. ",(0,l.kt)("br",null),"\nAlso called when exiting the game."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The creation, consisting of one or more ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Body"},"bodies"),", consisting of one or more ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Shape"},"shapes")," joined together with ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Joint"},"joints")," are always unloaded at the same time.")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"onexplosion"},"onExplosion"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.server_onExplosion( self, center, destructionLevel )\nend\n")),(0,l.kt)("p",null,"Called when the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Shape"},"Shape")," is hit by an explosion. ",(0,l.kt)("br",null)),(0,l.kt)("p",null,"For more information about explosions, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Static-Functions/sm.physics#explode"},"sm.physics.explode"),"."),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"center")," [",(0,l.kt)("strong",null," vec3 "),"]: The center of the explosion."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"destructionLevel")," [",(0,l.kt)("strong",null," int "),"]: The level of destruction done by this explosion. Corresponds to the ",(0,l.kt)("code",null,"durability")," rating of a Shape.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"onsledgehammer"},"onSledgehammer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.server_onSledgehammer( self )\nend\n")),(0,l.kt)("admonition",{title:"deprecated",type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Use ",(0,l.kt)("a",{parentName:"p",href:"#onMelee"},"onMelee")," instead.")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"client-only"},"Client-only"),(0,l.kt)("h3",{id:"oninteract"},"onInteract"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.client_onInteract( self, character, state )\nend\n")),(0,l.kt)("p",null,"Called when a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Player"},"Player")," is interacting with the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," by pressing the ",(0,l.kt)("code",null,"Use")," key (default ",(0,l.kt)("code",null,"E"),") ",(0,l.kt)("br",null),"\nor pressing ",(0,l.kt)("code",null,"0-9")," if the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," is connected to a seat (See: ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable#pressseatinteractable"},"Interactable:pressSeatInteractable"),")."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"If this method is defined, the player will see the interaction text ",(0,l.kt)("code",null,"E Use")," when looking at the Shape.")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"character")," [",(0,l.kt)("strong",null," character "),"]: The Character of the Player that is interacting with the Interactable."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"state")," [",(0,l.kt)("strong",null," bool "),"]: The interaction state (",(0,l.kt)("code",null,"true")," if pressed, ",(0,l.kt)("code",null,"false")," if released).")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Example Usage"',title:'"Example','Usage"':!0},"-- Example of interaction\nfunction MySwitch.client_onInteract( self, character, state ) \n    if state then\n        self.network:sendToServer( 'sv_n_toggle' )\n    end\nend\n\nfunction MySwitch.sv_n_toggle( self ) \n    -- Toggle on and off\n    self.interactable.active = not self.interactable.active\nend\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"caninteract"},"canInteract"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.client_canInteract( self, character )\n    return true --true or false, default true if onInteract is implemented\nend\n")),(0,l.kt)("p",null,"Called to check whether the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," can be interacted with at this moment."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"This callback can also be used to change the interaction text shown to the player using ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Static-Functions/sm.gui#setinteractiontext"},"sm.gui.setInteractionText")," (Defaults to ",(0,l.kt)("code",null,"E Use"),")."),(0,l.kt)("p",{parentName:"admonition"},"This can be used to override restrictions (See ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Shape"},"Shape.usable"),").")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"character")," [",(0,l.kt)("strong",null," character "),"]: The Character of the Player that is looking at the Shape.")),(0,l.kt)("strong",null,"Returns:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"[",(0,l.kt)("strong",null," bool "),"]",": A boolean indicating whether the interactable can be interacted with or not (Defaults to true if ",(0,l.kt)("code",null,"client_onInteract")," is implemented, otherwise false).")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"ontinker"},"onTinker"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.client_onTinker( self, character, state )\nend\n")),(0,l.kt)("p",null,"Called when a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Player"},"Player")," is interacting with the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," by pressing the ",(0,l.kt)("code",null,"Tinker")," key (default ",(0,l.kt)("code",null,"U"),")."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Tinkering usually means opening the upgrade menu for seats.")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"character")," [",(0,l.kt)("strong",null," character "),"]: The Character of the Player that is tinkering with the Interactable."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"state")," [",(0,l.kt)("strong",null," bool "),"]: The interaction state (",(0,l.kt)("code",null,"true")," if pressed, ",(0,l.kt)("code",null,"false")," if released).")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"cantinker"},"canTinker"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.client_canTinker( self, character )\n    return true --true or false, default true if onTinker is implemented\nend\n")),(0,l.kt)("p",null,"Called to check whether the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," can be tinkered with at this moment."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Tinkering usually means opening the upgrade menu for seats.")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"character")," [",(0,l.kt)("strong",null," character "),"]: The Character of the Player that is looking at the Shape.")),(0,l.kt)("strong",null,"Returns:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"[",(0,l.kt)("strong",null," bool "),"]",": A boolean indicating whether the interactable can be tinkered with or not (Defaults to true if ",(0,l.kt)("code",null,"client_onTinker")," is implemented, otherwise false).")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"oninteractthroughjoint"},"onInteractThroughJoint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.client_onInteractThroughJoint( self, character, state, joint )\nend\n")),(0,l.kt)("p",null,"Called when a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Player"},"Player")," is interacting with the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," through a connected ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Joint"},"Joint"),"."),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"character")," [",(0,l.kt)("strong",null," character "),"]: The Character of the Player that is interacting with the Interactable."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"state")," [",(0,l.kt)("strong",null," bool "),"]: The interaction state. Always true. ",(0,l.kt)("code",null,"client_onInteractThroughJoint")," only receives the key down event."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"joint")," [",(0,l.kt)("strong",null," joint "),"]: The Joint that the Player interacted through.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"caninteractthroughjoint"},"canInteractThroughJoint"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.client_canInteractThroughJoint( self, character )\n    return true --true or false, default true if onInteractThroughJoint is implemented\nend\n")),(0,l.kt)("p",null,"Called to check whether the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," can be interacted with through a child ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Joint"},"Joint")," at this moment."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"This callback can also be used to change the interaction text shown to the player using ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Static-Functions/sm.gui#setinteractiontext"},"sm.gui.setInteractionText")," (Defaults to ",(0,l.kt)("code",null,"E Use"),")")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"character")," [",(0,l.kt)("strong",null," character "),"]: The Character of the Player that is looking at the Joint.")),(0,l.kt)("strong",null,"Returns:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"[",(0,l.kt)("strong",null," bool "),"]",": A boolean indicating whether the interactable can be interacted with or not (Defaults to true if ",(0,l.kt)("code",null,"client_onInteractThroughJoint")," is implemented, otherwise false).")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"onaction"},"onAction"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.client_onAction( self, action, state )\nend\n")),(0,l.kt)("p",null,"Called when the interactable receives input from a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Player"},"Player")," with the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Character"},"Character")," locked to the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable"),"."),(0,l.kt)("p",null,"When a ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Character"},"Character")," is seated in an ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Shape"},"Shape")," with a ",(0,l.kt)("code",null,"seat")," component, the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Character"},"Character")," is also considered locked to the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable"),"."),(0,l.kt)("p",null,"Details about the ",(0,l.kt)("code",null,"action")," value are in ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#sminteractableactions"},"sm.interactable.actions"),"."),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"action")," [",(0,l.kt)("strong",null," int "),"]: The action as an integer value."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"state")," [",(0,l.kt)("strong",null," bool "),"]: True on begin action, false on end action.")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"cancarry"},"canCarry"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.client_canCarry( self )\n    return true --true or false, default false\nend\n")),(0,l.kt)("p",null,"Called to check if the shape must be carried instead of put in the inventory."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Shapes with the ",(0,l.kt)("code",null,"carryItem")," attribute are always carried.")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance.")),(0,l.kt)("strong",null,"Returns:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"[",(0,l.kt)("strong",null," bool "),"]",": A boolean indicating whether the interacable must be carried or not. (Defaults to false)")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getavailableparentconnectioncount"},"getAvailableParentConnectionCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.client_getAvailableParentConnectionCount( self, connectionType )\n    return int --The number of available connections.\nend\n")),(0,l.kt)("p",null,"Called to check how many more parent (input) connections with the given ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#sminteractableconnectiontype"},"connectionType")," the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," will accept. ",(0,l.kt)("br",null),"\nReturn 1 or more to allow a connection of this type."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#sminteractableconnectiontype"},"sm.interactable.connectionType")," for details about the connection type."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#shapeclass"},"maxParentCount")," constant must be 1 or more for this callback to be called.")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"connectionType")," [",(0,l.kt)("strong",null," int "),"]: The connection type(s).")),(0,l.kt)("strong",null,"Returns:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"[",(0,l.kt)("strong",null," int "),"]",": The number of available connections.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Example Usage"',title:'"Example','Usage"':!0},"-- Example of implementation where logic and power shares the same slot but electricity counts as separate\nMyInteractable.maxParentCount = 2\nMyInteractable.connectionInput = sm.interactable.connectionType.logic + sm.interactable.connectionType.power + sm.interactable.connectionType.electricity\n\nfunction MyInteractable.client_getAvailableParentConnectionCount( self, connectionType )\n    if bit.band( connectionType, bit.bor( sm.interactable.connectionType.logic, sm.interactable.connectionType.power ) ) ~= 0 then\n        return 1 - self:getParents( bit.bor( sm.interactable.connectionType.logic, sm.interactable.connectionType.power ) )\n    end\n    if bit.band( connectionType, sm.interactable.connectionType.electricity ) ~= 0 then\n        return 1 - self:getParents( sm.interactable.connectionType.electricity )\n    end\n    return 0\nend\n")),(0,l.kt)("hr",null),(0,l.kt)("h3",{id:"getavailablechildconnectioncount"},"getAvailableChildConnectionCount"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"function ShapeClass.client_getAvailableChildConnectionCount( self, connectionType )\n    return int --The number of available connections.\nend\n")),(0,l.kt)("p",null,"Called to check how many more child (output) connections with the given ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#sminteractableconnectiontype"},"connectionType")," the ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Interactable"},"Interactable")," will accept. ",(0,l.kt)("br",null),"\nReturn 1 or more to allow a connection of this type."),(0,l.kt)("p",null,"See ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#sminteractableconnectiontype"},"sm.interactable.connectionType")," for details about the connection type."),(0,l.kt)("admonition",{title:"note",type:"info"},(0,l.kt)("p",{parentName:"admonition"},"The ",(0,l.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Constants#shapeclass"},"maxChildCount")," constant must be 1 or more for this callback to be called.")),(0,l.kt)("strong",null,"Arguments:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"self")," [",(0,l.kt)("strong",null," table "),"]: The class instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("code",null,"connectionType")," [",(0,l.kt)("strong",null," int "),"]: The connection type(s).")),(0,l.kt)("strong",null,"Returns:")," ",(0,l.kt)("br",null),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"[",(0,l.kt)("strong",null," int "),"]",": The number of available connections.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Example Usage"',title:'"Example','Usage"':!0},"-- Example of implementation that accepts 10 logic connections and 1 power connection\nMyInteractable.maxChildCount = 11\nMyInteractable.connectionOutput = sm.interactable.connectionType.logic + sm.interactable.connectionType.power\n\nfunction MyIteractable.client_getAvailableChildConnectionCount( self, connectionType )\n    if bit.band( connectionType, sm.interactable.connectionType.logic ) ~= 0 then\n        return 10 - self:getParents( sm.interactable.connectionType.logic )\n    end\n    if bit.band( connectionType, sm.interactable.connectionType.power ) ~= 0 then\n        return 1 - self:getParents( sm.interactable.connectionType.power )\n    end\n    return 0\nend\n")),(0,l.kt)("hr",null))}m.isMDXComponent=!0}}]);