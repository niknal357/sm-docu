"use strict";(self.webpackChunksm_docs=self.webpackChunksm_docs||[]).push([[6178],{2046:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var t=r(5893),s=r(1151);const a={sidebar_position:1,title:"Introduction",hide_title:!0,"sidebar-label":"Introduction",slug:"/"},o=void 0,i={id:"Start",title:"Introduction",description:"Introduction",source:"@site/docs/Start.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Introduction",hide_title:!0,"sidebar-label":"Introduction",slug:"/"},sidebar:"tutorialSidebar",next:{title:"Info",permalink:"/docs/Game-Script-Environment/Info"}},c={},l=[{value:"Introduction",id:"introduction",level:3},{value:"Console",id:"console",level:3},{value:"Classes",id:"classes",level:3},{value:"Static Functions",id:"static-functions",level:3},{value:"Userdata",id:"userdata",level:3},{value:"Sandboxes",id:"sandboxes",level:3},{value:"Server",id:"server",level:3},{value:"Client",id:"client",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["Welcome! \ud83d\udc4b",(0,t.jsx)("br",{}),"\r\nThis is an improved version of the Scrap Mechanic Lua API Reference at ",(0,t.jsx)(n.a,{href:"https://scrapmechanic.com/api/index.html",children:"https://scrapmechanic.com/api/index.html"}),". ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.p,{children:["A compiled version of this website will always be available ",(0,t.jsx)(n.a,{href:"https://github.com/niknal357/sm-docu",children:"here"}),". ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.p,{children:["In this documentation, you will find details specific to Scrap Mechanic's Lua scripting. ",(0,t.jsx)("br",{}),"\r\nFor more general information on how the Lua scripting language works, you can review the official Lua documentation. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.p,{children:["Scrap Mechanic uses Lua version 5.1. Check the official ",(0,t.jsx)(n.a,{href:"https://www.lua.org/manual/5.1/",children:"Manual"})," for more information. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.p,{children:["The documentation is also available as a (hopefully) up-to-date ",(0,t.jsx)(n.a,{href:"https://github.com/Vajdani/sm_docs/blob/master/sm.lua",children:"Lua documentation file"}),". ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.admonition,{title:"note",type:"info",children:[(0,t.jsxs)(n.p,{children:["This documentation is for Scrap Mechanic Version ",(0,t.jsx)("strong",{children:"0.6.0 or later"}),"."]}),(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)("strong",{children:"previous documentation"})," for Scrap Mechanic Version ",(0,t.jsx)("strong",{children:"0.5.1"})," is no longer available, as the content was not preserved."]}),(0,t.jsxs)(n.p,{children:["If you encounter any ",(0,t.jsx)(n.strong,{children:"errors, malfunctions, broken links or missing information"}),", please report them ",(0,t.jsx)(n.a,{href:"https://github.com/niknal357/sm-docs/issues",children:"here"}),".\r\nIf you yourself want to contribute to this documentation, you can do so ",(0,t.jsx)(n.a,{href:"https://github.com/niknal357/sm-docs",children:"here"}),"."]})]}),"\n",(0,t.jsx)(n.h3,{id:"console",children:"Console"}),"\n",(0,t.jsxs)(n.p,{children:["It is recommended to start the game with the ",(0,t.jsx)("code",{children:"-dev"})," launch option in steam to get access to the ",(0,t.jsx)("br",{}),"\r\nDebug Console and enable the script hot-reload feature. ",(0,t.jsx)("br",{}),"\r\nUse ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Static-Functions/Global#print",children:"print"})," to print data to the console. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.h3,{id:"classes",children:"Classes"}),"\n",(0,t.jsxs)(n.p,{children:["Classes act as the entry point from the game to the world of Lua. ",(0,t.jsx)("br",{}),'\r\nA script class is for example a buildable part with a "scripted" json object:']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"scripted": {\r\n\t"filename": "$CONTENT_DATA/Scripts/MyShape.lua",\r\n\t"classname": "MyShape",\r\n\t"data": {\r\n\t\t"hello": "Hello world!"\r\n\t}\r\n},\n'})}),"\n",(0,t.jsx)("strong",{children:"Lua Script:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'-- MyShape.lua - Interactable part example script\r\n\r\n-- Creates a new class\r\nMyShape = class()\r\n\r\n-- Sets ShapeClass constants\r\nMyShape.maxParentCount = 1\r\nMyShape.maxChildCount = 0\r\nMyShape.connectionInput = sm.interactable.connectionType.none\r\nMyShape.connectionOutput = sm.interactable.connectionType.logic\r\nMyShape.colorNormal = sm.color.new( 0x777777ff )\r\nMyShape.colorHighlight = sm.color.new( 0x888888ff )\r\n\r\n-- Called on creation\r\nfunction MyShape:server_onCreate()\r\n\tprint( self.data.hello )\r\nend\r\n\r\n-- Called on creation\r\nfunction MyShape:client_onCreate()\r\n\tself.cl = { time = 0 }\r\nend\r\n\r\n-- Called every tick\r\nfunction MyShape:client_onFixedUpdate( timeStep )\r\n\tself.cl.time = self.cl.time + timeStep\r\nend\r\n\r\n-- Called on interact\r\nfunction MyShape:client_onInteract( character, state )\r\n\tif state then\r\n\t\tprint( "Pressed E" )\r\n\t\tself.network:sendToServer( "sv_n_toggle" )\r\n\telse\r\n\t\tprint( "Released E" )\r\n\tend\r\n\tprint( "Shape has existed for", self.cl.time, "seconds" )\r\nend\r\n\r\nfunction MyShape:sv_n_toggle() \r\n\t-- Toggle on and off\r\n\tself.interactable.active = not self.interactable.active\r\nend\n'})}),"\n",(0,t.jsx)(n.h3,{id:"static-functions",children:"Static Functions"}),"\n",(0,t.jsxs)(n.p,{children:["Static Functions can be called from Lua to do certain things in the game, ",(0,t.jsx)("br",{}),"\r\nsuch as creating a part using ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Static-Functions/sm.shape#createpart",children:"sm.shape.createPart"}),". ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.p,{children:["The createPart function will return a userdata object of type Shape which can be used to reference the part. ",(0,t.jsx)("br",{}),"\r\nThis reference is valid as long as the part still exists in the game. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.h3,{id:"userdata",children:"Userdata"}),"\n",(0,t.jsxs)(n.p,{children:["Userdata is a Lua concept to define custom objects. ",(0,t.jsx)("br",{}),"\r\nScrap Mechanic uses userdata to add game objects such as a ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Userdata/Shape",children:"Shape"})," and utility objects such as ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:"Vec3"}),". ",(0,t.jsx)("br",{}),"\r\nThey are similar to ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Instance_(computer_science)",children:"instances"})," in ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Object-oriented_programming",children:"object-oriented programming"}),". ",(0,t.jsx)("br",{}),"\r\nThe userdata objects have a set of member values and functions. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.p,{children:["Here is an example where the member function ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Userdata/Shape#getcolor",children:"getColor"})," is called on the ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Userdata/Shape",children:"Shape"})," userdata:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local color = myShape.getColor( myShape ) -- All userdata functions require the object itself as first parameter.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Or with ",(0,t.jsx)("code",{children:":"})," syntactic sugar which adds the userdata itself as the first parameter:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local color = myShape:getColor()\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Userdata can also be used as parameters to other functions. ",(0,t.jsx)("br",{}),"\r\nThe color returned by ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Userdata/Shape#getcolor",children:"getColor"})," is another userdata type; ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Userdata/Color",children:"Color"}),". That color can be used as a parameter to ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Userdata/Shape#setcolor",children:"setColor"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local color = myShape:getColor()\r\nmyOtherShape:setColor( color ) -- Copy the color from myShape to myOtherShape\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Userdata can also have member values; which are actually convenience for calling a get or set member function. ",(0,t.jsx)("br",{}),"\r\nThis does exactly the same thing as the above:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local color = myShape.color\r\nmyOtherShape.color = color -- Copy the color from myShape to myOtherShape\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Another way to get a ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Userdata/Color",children:"Color"})," userdata object is to call ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Static-Functions/sm.color#new",children:"sm.color.new"}),". ",(0,t.jsx)("br",{}),"\r\nHere is an example where the shape color is set to red:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:"local color = sm.color.new( 1.0, 0.0, 0.0 )\r\nmyShape.color = color -- Set shape to red\n"})}),"\n",(0,t.jsx)(n.h3,{id:"sandboxes",children:"Sandboxes"}),"\n",(0,t.jsxs)(n.p,{children:['When Lua code is run by the game, they are run in a "sandbox". ',(0,t.jsx)("br",{}),"\r\nThe sandbox makes sure no functions can be called that the sandbox does not allow in the current context. ",(0,t.jsx)("br",{}),"\r\nOne reason for the sandbox to exist is to enforce a server/client structure, this is to help make sure the scripts work when playing multiplayer. ",(0,t.jsx)("br",{}),"\r\nThe sandbox also makes sure no harmful code can be written in Lua by restricting file access and the ability to run executables. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.h3,{id:"server",children:"Server"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)("strong",{children:"server"})," side simulates the game world and communicates with all clients that are currently playing, including the host itself. ",(0,t.jsx)("br",{}),"\r\nThe server side is only running on the hosting player's computer. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.p,{children:["In a script class, ",(0,t.jsx)("strong",{children:"serverCallback"})," implies that the the code will run in server mode and can only access functions marked as ",(0,t.jsx)("strong",{children:"server"})," or ",(0,t.jsx)("strong",{children:"server and client"}),". ",(0,t.jsx)("br",{}),"\r\nTo check if a script is running in server mode at runtime you can also use ",(0,t.jsx)(n.a,{href:"/docs/Game-Script-Environment/Static-Functions/sm#isservermode",children:"sm.isServerMode"}),". ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsx)(n.h3,{id:"client",children:"Client"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)("strong",{children:"client"})," is the part of Scrap Mechanic that a player sees and interacts with (e.g. graphics, audio, player input, etc.). ",(0,t.jsx)("br",{}),"\r\nA client is running on every player's computer, including the host. ",(0,t.jsx)("br",{})]}),"\n",(0,t.jsxs)(n.p,{children:["In a script class, ",(0,t.jsx)("strong",{children:"clientCallback"})," implies that the the code will run in server mode and can only access functions marked as ",(0,t.jsx)("strong",{children:"client"})," or ",(0,t.jsx)("strong",{children:"server and client"}),". ",(0,t.jsx)("br",{})]})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},1151:(e,n,r)=>{r.d(n,{Z:()=>i,a:()=>o});var t=r(7294);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);