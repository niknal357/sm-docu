"use strict";(self.webpackChunksm_docs=self.webpackChunksm_docs||[]).push([[168],{3905:(t,e,l)=>{l.d(e,{Zo:()=>k,kt:()=>m});var n=l(7294);function r(t,e,l){return e in t?Object.defineProperty(t,e,{value:l,enumerable:!0,configurable:!0,writable:!0}):t[e]=l,t}function a(t,e){var l=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),l.push.apply(l,n)}return l}function u(t){for(var e=1;e<arguments.length;e++){var l=null!=arguments[e]?arguments[e]:{};e%2?a(Object(l),!0).forEach((function(e){r(t,e,l[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(l)):a(Object(l)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(l,e))}))}return t}function i(t,e){if(null==t)return{};var l,n,r=function(t,e){if(null==t)return{};var l,n,r={},a=Object.keys(t);for(n=0;n<a.length;n++)l=a[n],e.indexOf(l)>=0||(r[l]=t[l]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(n=0;n<a.length;n++)l=a[n],e.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(t,l)&&(r[l]=t[l])}return r}var o=n.createContext({}),s=function(t){var e=n.useContext(o),l=e;return t&&(l="function"==typeof t?t(e):u(u({},e),t)),l},k=function(t){var e=s(t.components);return n.createElement(o.Provider,{value:e},t.children)},c="mdxType",g={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var l=t.components,r=t.mdxType,a=t.originalType,o=t.parentName,k=i(t,["components","mdxType","originalType","parentName"]),c=s(l),p=r,m=c["".concat(o,".").concat(p)]||c[p]||g[p]||a;return l?n.createElement(m,u(u({ref:e},k),{},{components:l})):n.createElement(m,u({ref:e},k))}));function m(t,e){var l=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=l.length,u=new Array(a);u[0]=p;var i={};for(var o in e)hasOwnProperty.call(e,o)&&(i[o]=e[o]);i.originalType=t,i[c]="string"==typeof t?t:r,u[1]=i;for(var s=2;s<a;s++)u[s]=l[s];return n.createElement.apply(null,u)}return n.createElement.apply(null,l)}p.displayName="MDXCreateElement"},6573:(t,e,l)=>{l.r(e),l.d(e,{assets:()=>o,contentTitle:()=>u,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var n=l(7462),r=(l(7294),l(3905));const a={sidebar_position:12,title:"sm.terrainTile",hide_title:!0,"sidebar-label":"sm.terrainTile"},u=void 0,i={unversionedId:"Terrain-Script-Environment/Static-Functions/sm.terrainTile",id:"Terrain-Script-Environment/Static-Functions/sm.terrainTile",title:"sm.terrainTile",description:"sm.terrainTile",source:"@site/docs/Terrain-Script-Environment/Static-Functions/sm.terrainTile.md",sourceDirName:"Terrain-Script-Environment/Static-Functions",slug:"/Terrain-Script-Environment/Static-Functions/sm.terrainTile",permalink:"/docs/Terrain-Script-Environment/Static-Functions/sm.terrainTile",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12,title:"sm.terrainTile",hide_title:!0,"sidebar-label":"sm.terrainTile"},sidebar:"tutorialSidebar",previous:{title:"sm.terrainGeneration",permalink:"/docs/Terrain-Script-Environment/Static-Functions/sm.terrainGeneration"},next:{title:"sm.util",permalink:"/docs/Terrain-Script-Environment/Static-Functions/sm.util"}},o={},s=[{value:"sm.terrainTile",id:"smterraintile",level:2},{value:"Functions",id:"functions",level:2},{value:"getAssetsForCell",id:"getassetsforcell",level:3},{value:"getClutterIdxAt",id:"getclutteridxat",level:3},{value:"getColorAt",id:"getcolorat",level:3},{value:"getContentFromPrefab",id:"getcontentfromprefab",level:3},{value:"getCreationsForCell",id:"getcreationsforcell",level:3},{value:"getCreatorId",id:"getcreatorid",level:3},{value:"getDecalsForCell",id:"getdecalsforcell",level:3},{value:"getHarvestablesForCell",id:"getharvestablesforcell",level:3},{value:"getHeightAt",id:"getheightat",level:3},{value:"getKinematicsForCell",id:"getkinematicsforcell",level:3},{value:"getMaterialAt",id:"getmaterialat",level:3},{value:"getNodesForCell",id:"getnodesforcell",level:3},{value:"getPrefabsForCell",id:"getprefabsforcell",level:3},{value:"getSize",id:"getsize",level:3},{value:"getTileUuid",id:"gettileuuid",level:3}],k={toc:s},c="wrapper";function g(t){let{components:e,...l}=t;return(0,r.kt)(c,(0,n.Z)({},k,l,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"smterraintile"},"sm.terrainTile"),(0,r.kt)("p",null,"Reads .tile file data."),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("h3",{id:"getassetsforcell"},"getAssetsForCell"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getAssetsForCell( tileId, tileOffsetX, tileOffsetY, sizeLevel )\n")),(0,r.kt)("p",null,"Returns a table of all assets in a terrain cell."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileId")," [",(0,r.kt)("strong",null," uuid "),"]: The tile id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetX")," [",(0,r.kt)("strong",null," int "),"]: The tile offset X."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetY")," [",(0,r.kt)("strong",null," int "),"]: The tile offset Y."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"sizeLevel")," [",(0,r.kt)("strong",null," int "),"]: The asset size level.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table "),"]",": A table containing the asset data. See structure below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Table Structure"',title:'"Table','Structure"':!0},"{\n    {\n        uuid = uuid,\n        pos = vec3,\n        rot = quat,\n        colors = {\n            string = color,\n            ...\n        },\n        tags = {\n            string,\n            ...\n        }\n    },\n    ...\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getclutteridxat"},"getClutterIdxAt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getClutterIdxAt( tileId, tileOffsetX, tileOffsetY, x, y )\n")),(0,r.kt)("p",null,"Returns the clutter index at position (X, Y) in a tile."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileId")," [",(0,r.kt)("strong",null," int "),"]: The tile id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetX")," [",(0,r.kt)("strong",null," int "),"]: The tile offset X."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetY")," [",(0,r.kt)("strong",null," int "),"]: The tile offset Y."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"x")," [",(0,r.kt)("strong",null," int "),"]: The X position."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"y")," [",(0,r.kt)("strong",null," int "),"]: The Y position.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The clutter index.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getcolorat"},"getColorAt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getColorAt( tileId, tileOffsetX, tileOffsetY, lod, x, y )\n")),(0,r.kt)("p",null,"Returns the terrain color at position (X, Y) in a tile."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileId")," [",(0,r.kt)("strong",null," int "),"]: The tile id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetX")," [",(0,r.kt)("strong",null," int "),"]: The tile offset X."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetY")," [",(0,r.kt)("strong",null," int "),"]: The tile offset Y."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"lod")," [",(0,r.kt)("strong",null," int "),"]: The level of detail."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"x")," [",(0,r.kt)("strong",null," int "),"]: The X position."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"y")," [",(0,r.kt)("strong",null," int "),"]: The Y position.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The color R value."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The color G value."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The color B value.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getcontentfromprefab"},"getContentFromPrefab"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getContentFromPrefab( prefabPath, loadFlags )\n")),(0,r.kt)("p",null,"Returns the content of a prefab."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"prefabPath")," [",(0,r.kt)("strong",null," string "),"]: The path to the prefab file."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"loadFlags")," [",(0,r.kt)("strong",null," int "),"]: A mask of content to load.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table1 "),"]",": A table of creations in the prefab. See structure below."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table2 "),"]",": A table of prefabs in the prefab. See structure below."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table3 "),"]",": A table of nodes in the prefab. See structure below."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table4 "),"]",": A table of assets in the prefab. See structure below."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table5 "),"]",": A table of decals in the prefab. See structure below."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table6 "),"]",": A table of harvestables in the prefab. See structure below."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table7 "),"]",": A table of kinematics in the prefab. See structure below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Table Contents"',title:'"Table','Contents"':!0},"--table1\n{\n    {\n        name = string,\n        pos = vec3,\n        rot = quat,\n        sortingIndex = int,\n        tags = {\n            string,\n            ...\n        }\n    },\n    ...\n}\n\n--table2\n{\n    {\n        name = string,\n        pos = vec3,\n        rot = quat,\n        scale = vec3,\n        tags = {\n            string,\n            ...\n        },\n        flags = int\n    },\n    ...\n}\n\n--table3\n{\n    {\n        pos = vec3,\n        rot = quat,\n        scale = vec3,\n        tags = {\n            string,\n            ...\n        },\n        params = table\n    },\n    ...\n}\n\n--table4\n{\n    {\n        uuid = uuid,\n        pos = vec3,\n        rot = quat,\n        slopeNormal = vec3,\n        colors = {\n            string = color,\n            ...\n        },\n        tags = {\n            string,\n            ...\n        }\n    },\n    ...\n}\n\n--table5\n{\n    {\n        pos = vec3,\n        rot = quat,\n        scale = vec3,\n        decalId = int,\n        color = color,\n        layer = int,\n        tags = {\n            string,\n            ...\n        }\n    },\n    ...\n}\n\n--table6\n{\n    {\n        uuid = uuid,\n        pos = vec3,\n        rot = quat,\n        color = color,\n        params = table,\n        tags = {\n            string,\n            ...\n        }\n    },\n    ...\n}\n\n--table7\n{\n    {\n        uuid = uuid,\n        pos = vec3,\n        rot = quat,\n        scale = vec3,\n        color = color,\n        params = table,\n        tags = {\n            string,\n            ...\n        }\n    },\n    ...\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getcreationsforcell"},"getCreationsForCell"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getCreationsForCell( tileId, tileOffsetX, tileOffsetY )\n")),(0,r.kt)("p",null,"Returns a table of all creations in a terrain cell."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileId")," [",(0,r.kt)("strong",null," uuid "),"]: The tile id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetX")," [",(0,r.kt)("strong",null," int "),"]: The tile offset X."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetY")," [",(0,r.kt)("strong",null," int "),"]: The tile offset Y.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table "),"]",": A table of creation data. See structure below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Table Structure"',title:'"Table','Structure"':!0},"{\n    {\n        pathOrJson = string,\n        pos = vec3,\n        rot = quat\n    },\n    ...\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getcreatorid"},"getCreatorId"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getCreatorId( path )\n")),(0,r.kt)("p",null,"Returns the id of the tile creator."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"path")," [",(0,r.kt)("strong",null," string "),"]: The path to the tile file.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," string "),"]",": The creator's id.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getdecalsforcell"},"getDecalsForCell"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getDecalsForCell( id, X-offset, Y-offset )\n")),(0,r.kt)("p",null,"Returns all decals for a cell in a tile."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"id")," [",(0,r.kt)("strong",null," uuid "),"]: The tile id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"X-offset")," [",(0,r.kt)("strong",null," int "),"]: The offset along the X axis."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"Y-offset")," [",(0,r.kt)("strong",null," int "),"]: The offset along the Y axis.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table "),"]",": A table of decal data. See structure below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Table Structure"',title:'"Table','Structure"':!0},"{\n    {\n        pos = vec3,\n        rot = quat,\n        scale = vec3,\n        decalId = int,\n        color = color,\n        layer = int,\n        tags = {\n            string,\n            ...\n        }\n    },\n    ...\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getharvestablesforcell"},"getHarvestablesForCell"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getHarvestablesForCell( id, X-offset, Y-offset, sizeLevel )\n")),(0,r.kt)("p",null,"Returns all harvestables for a cell in a tile."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"id")," [",(0,r.kt)("strong",null," uuid "),"]: The tile id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"X-offset")," [",(0,r.kt)("strong",null," int "),"]: The offset along the X axis."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"Y-offset")," [",(0,r.kt)("strong",null," int "),"]: The offset along the Y axis."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"sizeLevel")," [",(0,r.kt)("strong",null," int "),"]: The size level of harvestables.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table "),"]",": A table of harvestable data. See structure below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Table Structure"',title:'"Table','Structure"':!0},"{\n    {\n        uuid = uuid,\n        pos = vec3,\n        rot = quat,\n        color = color,\n        params = table,\n        tags = {\n            string,\n            ...\n        }\n    },\n    ...\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getheightat"},"getHeightAt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getHeightAt( tileId, tileOffsetX, tileOffsetY, lod, x, y )\n")),(0,r.kt)("p",null,"Returns the terrain height at position (X, Y) in a tile."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileId")," [",(0,r.kt)("strong",null," int "),"]: The tile id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetX")," [",(0,r.kt)("strong",null," int "),"]: The tile offset X."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetY")," [",(0,r.kt)("strong",null," int "),"]: The tile offset Y."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"lod")," [",(0,r.kt)("strong",null," int "),"]: The level of detail."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"x")," [",(0,r.kt)("strong",null," int "),"]: The X position."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"y")," [",(0,r.kt)("strong",null," int "),"]: The Y position.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The height.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getkinematicsforcell"},"getKinematicsForCell"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getKinematicsForCell( id, X-offset, Y-offset, sizeLevel )\n")),(0,r.kt)("p",null,"Returns all kinematics for a cell in a tile."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"id")," [",(0,r.kt)("strong",null," uuid "),"]: The tile id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"X-offset")," [",(0,r.kt)("strong",null," int "),"]: The offset along the X axis."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"Y-offset")," [",(0,r.kt)("strong",null," int "),"]: The offset along the Y axis."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"sizeLevel")," [",(0,r.kt)("strong",null," int "),"]: The size level of kinematics.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table "),"]",": A table of kinematics data. See structure below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Table Structure"',title:'"Table','Structure"':!0},"{\n    {\n        uuid = uuid,\n        pos = vec3,\n        rot = quat,\n        scale = vec3,\n        color = color,\n        params = table,\n        tags = {\n            string,\n            ...\n        }\n    },\n    ...\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getmaterialat"},"getMaterialAt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getMaterialAt( tileId, tileOffsetX, tileOffsetY, lod, x, y )\n")),(0,r.kt)("p",null,"Returns the terrain material at position (X, Y) in a tile."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileId")," [",(0,r.kt)("strong",null," int "),"]: The tile id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetX")," [",(0,r.kt)("strong",null," int "),"]: The tile offset X."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"tileOffsetY")," [",(0,r.kt)("strong",null," int "),"]: The tile offset Y."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"lod")," [",(0,r.kt)("strong",null," int "),"]: The level of detail."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"x")," [",(0,r.kt)("strong",null," int "),"]: The X position."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"y")," [",(0,r.kt)("strong",null," int "),"]: The Y position.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The first R value."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The first G value."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The first B value."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The first A value."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The second R value."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The second G value."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The second B value."),(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," number "),"]",": The second A value.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getnodesforcell"},"getNodesForCell"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getNodesForCell( id, X-offset, Y-offset )\n")),(0,r.kt)("p",null,"Returns all nodes for a cell in a tile."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"id")," [",(0,r.kt)("strong",null," uuid "),"]: The tile id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"X-offset")," [",(0,r.kt)("strong",null," int "),"]: The offset along the X axis."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"Y-offset")," [",(0,r.kt)("strong",null," int "),"]: The offset along the Y axis.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table "),"]",": A table of node data. See structure below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Table Structure"',title:'"Table','Structure"':!0},"{\n    {\n        pos = vec3,\n        rot = quat,\n        scale = vec3,\n        params = table,\n        tags = {\n            string,\n            ...\n        }\n    },\n    ...\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getprefabsforcell"},"getPrefabsForCell"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getPrefabsForCell( id, X-offset, Y-offset )\n")),(0,r.kt)("p",null,"Returns all prefabs for a cell in a tile."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"id")," [",(0,r.kt)("strong",null," uuid "),"]: The tile id."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"X-offset")," [",(0,r.kt)("strong",null," int "),"]: The offset along the X axis."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"Y-offset")," [",(0,r.kt)("strong",null," int "),"]: The offset along the Y axis.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," table "),"]",": A table of prefab data. See structure below.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Table Structure"',title:'"Table','Structure"':!0},"{\n    {\n        name = string,\n        pos = vec3,\n        rot = quat,\n        scale = vec3,\n        tags = {\n            string,\n            ...\n        },\n        flags = int\n    },\n    ...\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"getsize"},"getSize"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getSize( path )\n")),(0,r.kt)("p",null,"Returns the size of a tile as the number of cells along one of the axises."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"path")," [",(0,r.kt)("strong",null," string "),"]: The path to the tile file.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," int "),"]",": The size.")),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"gettileuuid"},"getTileUuid"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"sm.terrainTile.getTileUuid( path )\n")),(0,r.kt)("p",null,"Returns the uuid for a tile file."),(0,r.kt)("strong",null,"Arguments:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("code",null,"path")," [",(0,r.kt)("strong",null," string "),"]: The path to the tile file.")),(0,r.kt)("strong",null,"Returns:")," ",(0,r.kt)("br",null),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"[",(0,r.kt)("strong",null," uuid "),"]",": The tile's uuid.")),(0,r.kt)("hr",null))}g.isMDXComponent=!0}}]);