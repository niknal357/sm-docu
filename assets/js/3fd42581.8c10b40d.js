"use strict";(self.webpackChunksm_docs=self.webpackChunksm_docs||[]).push([[3893],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},r=Object.keys(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)n=r[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),c=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return l.createElement(s.Provider,{value:t},e.children)},d="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},p=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=c(n),p=a,m=d["".concat(s,".").concat(p)]||d[p]||k[p]||r;return n?l.createElement(m,o(o({ref:t},u),{},{components:n})):l.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[d]="string"==typeof e?e:a,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return l.createElement.apply(null,o)}return l.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3107:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>k,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var l=n(7462),a=(n(7294),n(3905));const r={sidebar_position:17,title:"Network",hide_title:!0,"sidebar-label":"Network"},o=void 0,i={unversionedId:"Game-Script-Environment/Userdata/Network",id:"Game-Script-Environment/Userdata/Network",title:"Network",description:"Network",source:"@site/docs/Game-Script-Environment/Userdata/Network.md",sourceDirName:"Game-Script-Environment/Userdata",slug:"/Game-Script-Environment/Userdata/Network",permalink:"/docs/Game-Script-Environment/Userdata/Network",draft:!1,tags:[],version:"current",sidebarPosition:17,frontMatter:{sidebar_position:17,title:"Network",hide_title:!0,"sidebar-label":"Network"},sidebar:"tutorialSidebar",previous:{title:"LoadCellHandle",permalink:"/docs/Game-Script-Environment/Userdata/LoadCellHandle"},next:{title:"PathNode",permalink:"/docs/Game-Script-Environment/Userdata/PathNode"}},s={},c=[{value:"Network",id:"network",level:2},{value:"Functions",id:"functions",level:2},{value:"sendToClient",id:"sendtoclient",level:3},{value:"sendToClients",id:"sendtoclients",level:3},{value:"sendToServer",id:"sendtoserver",level:3},{value:"setClientData",id:"setclientdata",level:3}],u={toc:c},d="wrapper";function k(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,l.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("br",null),(0,a.kt)("h2",{id:"network"},"Network"),(0,a.kt)("p",null,"A userdata object representing a ",(0,a.kt)("strong",null,"network")," object."),(0,a.kt)("p",null,"Network is used for sending data between scripts running on ",(0,a.kt)("a",{parentName:"p",href:"/docs/#server"},"server")," and ",(0,a.kt)("a",{parentName:"p",href:"/docs/#client"},"client"),". ",(0,a.kt)("br",null),"\nThis allows the server to call a function on the client with one optional argument, and vice versa."),(0,a.kt)("admonition",{title:"note",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The network object is only accessible via ",(0,a.kt)("code",null,"self.network")," in scripted objects (see ",(0,a.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Classes/CommonCallbacks"},"classes"),").")),(0,a.kt)("admonition",{title:"warning",type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Network allows any Lua data to be sent between the host and other players in real-time. ",(0,a.kt)("br",null),"\nThis may result in ",(0,a.kt)("strong",null,"high latency")," and ",(0,a.kt)("strong",null,"lag")," in multiplayer."),(0,a.kt)("p",{parentName:"admonition"},"To avoid lag and minimize bandwidth usage, consider only sending data when necessary, ",(0,a.kt)("br",null),"\nwhen data has changed, and attempt to send as little amount of data as possible.")),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"sendtoclient"},"sendToClient"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"network:sendToClient( client, callback, data )\n")),(0,a.kt)("code",null,"Server-Only")," ",(0,a.kt)("br",null),(0,a.kt)("p",null,"Sends a network event from the server to a single client. ",(0,a.kt)("br",null),"\nThis will run the callback method on the client with one optional argument."),(0,a.kt)("strong",null,"Arguments:")," ",(0,a.kt)("br",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"network")," [",(0,a.kt)("strong",null," ",(0,a.kt)("a",{href:"/docs/Game-Script-Environment/Userdata/Network"}," Network ")," "),"]: The network."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"client")," [",(0,a.kt)("strong",null," ",(0,a.kt)("a",{href:"/docs/Game-Script-Environment/Userdata/Player"}," Player ")," "),"]: The client player (or the host)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"callback")," [",(0,a.kt)("strong",null," string "),"]: The name of the client function."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"data")," [",(0,a.kt)("strong",null," any "),"]: Optional extra data to send.")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"sendtoclients"},"sendToClients"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"network:sendToClients( callback, data )\n")),(0,a.kt)("code",null,"Server-Only")," ",(0,a.kt)("br",null),(0,a.kt)("p",null,"Sends a network event from the server to all clients. ",(0,a.kt)("br",null),"\nThis will run the callback method on the clients with one optional argument."),(0,a.kt)("strong",null,"Arguments:")," ",(0,a.kt)("br",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"network")," [",(0,a.kt)("strong",null," ",(0,a.kt)("a",{href:"/docs/Game-Script-Environment/Userdata/Network"}," Network ")," "),"]: The network."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"callback")," [",(0,a.kt)("strong",null," string "),"]: The name of the client function."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"data")," [",(0,a.kt)("strong",null," any "),"]: Optional extra data to send.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Example Usage"',title:'"Example','Usage"':!0},"-- Example of calling client function over network\nMyHorn = class()\n\nfunction MyHorn.server_onMelee( self, position, attacker, damage, power, direction, normal )\n    self.network:sendToClients( 'client_hit', position )\nend\n \nfunction MyHorn.client_hit( self, position )\n    -- Play sound\n    sm.audio.play( 'Horn', position )\nend\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"sendtoserver"},"sendToServer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"network:sendToServer( callback, data )\n")),(0,a.kt)("code",null,"Client-Only")," ",(0,a.kt)("br",null),(0,a.kt)("p",null,"Sends a network event from the client to the server. ",(0,a.kt)("br",null),"\nThis will run the callback method on the server with one optional argument."),(0,a.kt)("p",null,"The callback function receives one additional argument, which is the ",(0,a.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Userdata/Player"},"player")," of the client ",(0,a.kt)("br",null),"\nthat sent the event."),(0,a.kt)("strong",null,"Arguments:")," ",(0,a.kt)("br",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"network")," [",(0,a.kt)("strong",null," ",(0,a.kt)("a",{href:"/docs/Game-Script-Environment/Userdata/Network"}," Network ")," "),"]: The network."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"callback")," [",(0,a.kt)("strong",null," string "),"]: The name of the server function."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"data")," [",(0,a.kt)("strong",null," any "),"]: Optional extra data to send.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Example Usage"',title:'"Example','Usage"':!0},"-- Example of calling server function over network\nMySwitch = class()\n\nfunction MySwitch.client_onInteract( self, char, lookAt )\n    if lookAt then\n        self.network:sendToServer( 'server_toggle' )\n    end\nend\n\nfunction MySwitch.server_toggle( self )\n    -- Toggle on and off\n    self.interactable.active = not self.interactable.active\nend\n")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"setclientdata"},"setClientData"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},"network:setClientData( data, channel )\n")),(0,a.kt)("code",null,"Server-Only")," ",(0,a.kt)("br",null),(0,a.kt)("p",null,"Sets a lua object that will automatically be synchronized to clients."),(0,a.kt)("p",null,"Scripts which use this feature needs to implement ",(0,a.kt)("code",null,"client_onClientDataUpdate"),"."),(0,a.kt)("code",null,"client_onClientDataUpdate")," will be called on the client whenever the data has changed, ",(0,a.kt)("br",null),"including setting the data for the first time.",(0,a.kt)("p",null,"Channel 1 will be received before channel 2 if both are updated."),(0,a.kt)("admonition",{title:"note",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The callback function on the client is ",(0,a.kt)("strong",{parentName:"p"},"only")," called if the ",(0,a.kt)("br",null),"\ndata that is being set ",(0,a.kt)("strong",{parentName:"p"},"has changed"),". ",(0,a.kt)("br",null),"\nIf the data being set is ",(0,a.kt)("strong",{parentName:"p"},"the same"),", the client callback is ",(0,a.kt)("strong",{parentName:"p"},"not")," called.")),(0,a.kt)("strong",null,"Arguments:")," ",(0,a.kt)("br",null),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"network")," [",(0,a.kt)("strong",null," ",(0,a.kt)("a",{href:"/docs/Game-Script-Environment/Userdata/Network"}," Network ")," "),"]: The network."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"data")," [",(0,a.kt)("strong",null," any "),"]: The data to set."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("code",null,"channel")," [",(0,a.kt)("strong",null," int "),"]: The data channel (1 or 2, defaults to 1).")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="Example Usage"',title:'"Example','Usage"':!0},'MyEngine = class()\n\nfunction MyEngine.server_onCreate( self )\n    self.network:setClientData( { "gear" = 1 } )\nend\n\nfunction MyEngine.client_onClientDataUpdate( self, data, channel )\n    self.interactable:setPoseWeight( 0, data.gear / self.maxGears )\nend\n')),(0,a.kt)("hr",null))}k.isMDXComponent=!0}}]);