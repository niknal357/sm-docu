"use strict";(self.webpackChunksm_docs=self.webpackChunksm_docs||[]).push([[7371],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>h});var l=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function u(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,l)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?u(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,l,n=function(e,t){if(null==e)return{};var r,l,n={},u=Object.keys(e);for(l=0;l<u.length;l++)r=u[l],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(l=0;l<u.length;l++)r=u[l],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=l.createContext({}),i=function(e){var t=l.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=i(e.components);return l.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var r=e.components,n=e.mdxType,u=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=i(r),k=n,h=c["".concat(p,".").concat(k)]||c[k]||d[k]||u;return r?l.createElement(h,a(a({ref:t},s),{},{components:r})):l.createElement(h,a({ref:t},s))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var u=r.length,a=new Array(u);a[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:n,a[1]=o;for(var i=2;i<u;i++)a[i]=r[i];return l.createElement.apply(null,a)}return l.createElement.apply(null,r)}k.displayName="MDXCreateElement"},8743:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>d,frontMatter:()=>u,metadata:()=>o,toc:()=>i});var l=r(7462),n=(r(7294),r(3905));const u={sidebar_position:9,title:"CullSphereGroup",hide_title:!0,"sidebar-label":"CullSphereGroup"},a=void 0,o={unversionedId:"Game-Script-Environment/Userdata/CullSphereGroup",id:"Game-Script-Environment/Userdata/CullSphereGroup",title:"CullSphereGroup",description:"CullSphereGroup",source:"@site/docs/Game-Script-Environment/Userdata/CullSphereGroup.md",sourceDirName:"Game-Script-Environment/Userdata",slug:"/Game-Script-Environment/Userdata/CullSphereGroup",permalink:"/docs/Game-Script-Environment/Userdata/CullSphereGroup",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9,title:"CullSphereGroup",hide_title:!0,"sidebar-label":"CullSphereGroup"},sidebar:"tutorialSidebar",previous:{title:"Container",permalink:"/docs/Game-Script-Environment/Userdata/Container"},next:{title:"Effect",permalink:"/docs/Game-Script-Environment/Userdata/Effect"}},p={},i=[{value:"CullSphereGroup",id:"cullspheregroup",level:2},{value:"Functions",id:"functions",level:2},{value:"addSphere",id:"addsphere",level:3},{value:"getDelta",id:"getdelta",level:3},{value:"getOverlaps",id:"getoverlaps",level:3},{value:"leave",id:"leave",level:3},{value:"removeSphere",id:"removesphere",level:3}],s={toc:i},c="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,l.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("br",null),(0,n.kt)("h2",{id:"cullspheregroup"},"CullSphereGroup"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Associated namespace:")," ",(0,n.kt)("a",{parentName:"p",href:"/docs/Game-Script-Environment/Static-Functions/sm.cullSphereGroup"},"sm.cullSphereGroup")),(0,n.kt)("p",null,"A userdata object representing a ",(0,n.kt)("strong",null,"cull sphere group"),"."),(0,n.kt)("strong",null,"Values:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"id")," [",(0,n.kt)("strong",null," int "),"] ",(0,n.kt)("br",null),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"Get"),": The id of the sphere group.")))),(0,n.kt)("strong",null,"Operations:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"Operation"),(0,n.kt)("th",{parentName:"tr",align:null},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},(0,n.kt)("code",null,"CullSphereGroup")," == ",(0,n.kt)("code",null,"CullSphereGroup")),(0,n.kt)("td",{parentName:"tr",align:null},"Checks if two instances of ",(0,n.kt)("code",null,"CullSphereGroup")," refer to the same ",(0,n.kt)("code",null,"CullSphereGroup"),".")))),(0,n.kt)("h2",{id:"functions"},"Functions"),(0,n.kt)("h3",{id:"addsphere"},"addSphere"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"cullSphereGroup:addSphere( id, position, radius )\n")),(0,n.kt)("p",null,"Adds a sphere to the sphere group, duplicate ids are ignored."),(0,n.kt)("strong",null,"Arguments:")," ",(0,n.kt)("br",null),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"cullSphereGroup")," [",(0,n.kt)("strong",null," cullSphereGroup "),"]: The sphere group."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"id")," [",(0,n.kt)("strong",null," int "),"]: The sphere id."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"position")," [",(0,n.kt)("strong",null," vec3 "),"]: The sphere position."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"radius")," [",(0,n.kt)("strong",null," number "),"]: The sphere radius.")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"getdelta"},"getDelta"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"cullSphereGroup:getDelta( position, innerRadius, outerRadius )\n")),(0,n.kt)("p",null,"Queries the change in overlapping spheres since the last call to getDelta."),(0,n.kt)("strong",null,"Arguments:")," ",(0,n.kt)("br",null),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"cullSphereGroup")," [",(0,n.kt)("strong",null," cullSphereGroup "),"]: The sphere group."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"position")," [",(0,n.kt)("strong",null," vec3 "),"]: Position to query sphere."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"innerRadius")," [",(0,n.kt)("strong",null," number "),"]: Radius for the inner sphere."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"outerRadius")," [",(0,n.kt)("strong",null," number "),"]: Radius for the outer sphere.")),(0,n.kt)("strong",null,"Returns:")," ",(0,n.kt)("br",null),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"[",(0,n.kt)("strong",null," table "),"]",": A table of removed ids."),(0,n.kt)("li",{parentName:"ul"},"[",(0,n.kt)("strong",null," table "),"]",": A table of added ids.")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"getoverlaps"},"getOverlaps"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"cullSphereGroup:getOverlaps( position, radius )\n")),(0,n.kt)("p",null,"Query for overlapping spheres."),(0,n.kt)("strong",null,"Arguments:")," ",(0,n.kt)("br",null),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"cullSphereGroup")," [",(0,n.kt)("strong",null," cullSphereGroup "),"]: The sphere group."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"position")," [",(0,n.kt)("strong",null," vec3 "),"]: Position to query sphere."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"radius")," [",(0,n.kt)("strong",null," number "),"]: Radius for the query sphere.")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"leave"},"leave"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"cullSphereGroup:leave()\n")),(0,n.kt)("p",null,"Query all currently active spheres and leave them."),(0,n.kt)("strong",null,"Arguments:")," ",(0,n.kt)("br",null),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"cullSphereGroup")," [",(0,n.kt)("strong",null," cullSphereGroup "),"]: The sphere group.")),(0,n.kt)("strong",null,"Returns:")," ",(0,n.kt)("br",null),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"[",(0,n.kt)("strong",null," table "),"]",": A table of previously active ids.")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"removesphere"},"removeSphere"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-lua"},"cullSphereGroup:removeSphere( id )\n")),(0,n.kt)("p",null,"Removes a sphere from the sphere group."),(0,n.kt)("strong",null,"Arguments:")," ",(0,n.kt)("br",null),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"cullSphereGroup")," [",(0,n.kt)("strong",null," cullSphereGroup "),"]: The sphere group."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("code",null,"id")," [",(0,n.kt)("strong",null," int "),"]: The sphere id.")),(0,n.kt)("hr",null))}d.isMDXComponent=!0}}]);