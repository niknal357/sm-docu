"use strict";(self.webpackChunksm_docs=self.webpackChunksm_docs||[]).push([[8289],{7575:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=n(5893),t=n(1151);const i={sidebar_position:37,title:"sm.physics",hide_title:!0,"sidebar-label":"sm.physics"},a=void 0,c={id:"Game-Script-Environment/Static-Functions/sm.physics",title:"sm.physics",description:"sm.physics",source:"@site/docs/Game-Script-Environment/Static-Functions/sm.physics.md",sourceDirName:"Game-Script-Environment/Static-Functions",slug:"/Game-Script-Environment/Static-Functions/sm.physics",permalink:"/docs/Game-Script-Environment/Static-Functions/sm.physics",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:37,frontMatter:{sidebar_position:37,title:"sm.physics",hide_title:!0,"sidebar-label":"sm.physics"},sidebar:"tutorialSidebar",previous:{title:"sm.pathfinder",permalink:"/docs/Game-Script-Environment/Static-Functions/sm.pathfinder"},next:{title:"sm.player",permalink:"/docs/Game-Script-Environment/Static-Functions/sm.player"}},l={},d=[{value:"sm.physics",id:"smphysics",level:2},{value:"Functions",id:"functions",level:2},{value:"applyImpulse",id:"applyimpulse",level:3},{value:"applyTorque",id:"applytorque",level:3},{value:"distanceRaycast",id:"distanceraycast",level:3},{value:"explode",id:"explode",level:3},{value:"getGravity",id:"getgravity",level:3},{value:"getGroundMaterial",id:"getgroundmaterial",level:3},{value:"getSphereContacts",id:"getspherecontacts",level:3},{value:"multicast",id:"multicast",level:3},{value:"raycast",id:"raycast",level:3},{value:"raycastTarget",id:"raycasttarget",level:3},{value:"setGravity",id:"setgravity",level:3},{value:"sphereContactCount",id:"spherecontactcount",level:3},{value:"spherecast",id:"spherecast",level:3}];function o(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("br",{}),"\n",(0,r.jsx)(s.h2,{id:"smphysics",children:"sm.physics"}),"\n",(0,r.jsx)(s.p,{children:"Contains functions regarding the physics engine."}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Constants#smphysicsfilter",children:"Constants"})}),"\n",(0,r.jsx)(s.h2,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(s.h3,{id:"applyimpulse",children:"applyImpulse"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.applyImpulse( target, impulse, worldSpace, offset )\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Applies an impulse to an object, changing its velocity immediately. ",(0,r.jsx)("br",{}),"\r\nThe impulse is applied to the object's center point with an optional offset."]}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"target"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Shape",children:" Shape "}),"/body/character "]}),"]: The target that the impulse is applied to."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"impulse"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The direction and strength of the impulse."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"worldSpace"})," [",(0,r.jsx)("strong",{children:" bool "}),"]: Whether the impulse is applied in world space (global) coordinates. Defaults to local."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"offset"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The offset from the center point. Defaults to none."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"applytorque",children:"applyTorque"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.applyTorque( target, torque, worldSpace )\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Applies a torque impulse to a ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Userdata/Body",children:"Body"}),", changing its angular velocity immediately. ",(0,r.jsx)("br",{}),"\r\nThe torque is applied along the body's center of mass, making it rotate."]}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"target"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Body",children:" Body "})," "]}),"]: The body that the torque is applied to."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"torque"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The direction and strength of the torque."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"worldSpace"})," [",(0,r.jsx)("strong",{children:" bool "}),"]: Whether the torque is applied in world space (global) coordinates. Defaults to local."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"distanceraycast",children:"distanceRaycast"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.distanceRaycast( start, direction )\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Performs a distance ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Ray_casting",children:"ray cast"})," from a position in a given direction."]}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"start"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The start position."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"direction"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The ray's direction and length."]}),"\n"]}),"\n",(0,r.jsx)("strong",{children:"Returns:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsx)("strong",{children:" bool "}),"]: Whether the raycast was successful or not."]}),"\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsx)("strong",{children:" number "}),"]: The fraction (0.0 - 1.0) of the distance reached until collision."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"explode",children:"explode"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.explode( position, level, destructionRadius, impulseRadius, magnitude, effectName, ignoreShape, parameters )\n"})}),"\n",(0,r.jsx)("code",{children:"Server-Only"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.p,{children:["Creates an explosion at given position. ",(0,r.jsx)("br",{}),"\r\nThe explosion creates a shockwave that is capable of destroying blocks and pushing characters and creations away."]}),"\n",(0,r.jsxs)(s.p,{children:["Shapes that are within the explosion's destruction radius may receive the event ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Classes/ShapeClass#onexplosion",children:"server_onExplosion"}),"."]}),"\n",(0,r.jsxs)(s.admonition,{title:"note",type:"info",children:[(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)("strong",{children:"destruction level"})," is the damage effect on blocks and parts, determining how likely it is that they are destroyed. ",(0,r.jsx)("br",{}),"\r\nThis is related to the ",(0,r.jsx)("code",{children:"qualityLevel"})," found in parts json-files."]}),(0,r.jsxs)(s.p,{children:["Any quality level equal to or less than the destruction level may be destroyed. ",(0,r.jsx)("br",{}),"\r\nThe effect fades one level every half travelled of the remaining destruction radius."]}),(0,r.jsx)(s.p,{children:"A quality level of 0 means a block or part is indestructible."})]}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"position"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The center point of the explosion."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"level"})," [",(0,r.jsx)("strong",{children:" int "}),"]: The destruction level affecting nearby objects."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"destructionRadius"})," [",(0,r.jsx)("strong",{children:" number "}),"]: The destruction radius. Objects inside this sphere may be destroyed."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"impulseRadius"})," [",(0,r.jsx)("strong",{children:" number "}),"]: The impulse radius. Objects inside this sphere are affected by an impulse."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"magnitude"})," [",(0,r.jsx)("strong",{children:" number "}),"]: The impulse strength of the explosion. The strength diminishes with distance."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"effectName"})," [",(0,r.jsx)("strong",{children:" string "}),"]: The name of the effect to be played upon explosion. Optional."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"ignoreShape"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Shape",children:" Shape "})," "]}),"]: The shape to be ignored. Optional."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"parameters"})," [",(0,r.jsx)("strong",{children:" table "}),"]: A table containing parameters for the effect. Optional."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"getgravity",children:"getGravity"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.getGravity()\n"})}),"\n",(0,r.jsx)("code",{children:"Server-Only"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.p,{children:["Returns the gravitational acceleration affecting ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Userdata/Shape",children:"shapes"})," and ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Userdata/Body",children:"bodies"}),"."]}),"\n",(0,r.jsx)("strong",{children:"Returns:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsx)("strong",{children:" number "}),"]: The gravitational value."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"getgroundmaterial",children:"getGroundMaterial"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.getGroundMaterial( position )\n"})}),"\n",(0,r.jsx)(s.p,{children:"Returns the terrain material at the given position."}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"position"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The position."]}),"\n"]}),"\n",(0,r.jsx)("strong",{children:"Returns:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsx)("strong",{children:" string "}),"]: The terrain material at the position."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"getspherecontacts",children:"getSphereContacts"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.getSphereContacts( position, radius )\n"})}),"\n",(0,r.jsx)("code",{children:"Server-Only"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(s.p,{children:"Returns a table of the objects that were found inside the given sphere."}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"position"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The position of the sphere."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"radius"})," [",(0,r.jsx)("strong",{children:" number "}),"]: The radius of the sphere."]}),"\n"]}),"\n",(0,r.jsx)("strong",{children:"Returns:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsx)("strong",{children:" table "}),"]: A table containing tables of objects found inside the sphere. See structure below."]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",metastring:'title="Table Structure"',children:"{\r\n\tbodies = {\r\n\t\tBody1,\r\n\t\tBody2,\r\n\t\t...\r\n\t},\r\n\tcharacters = {\r\n\t\tCharacter1,\r\n\t\tCharacter2,\r\n\t\t...\r\n\t},\r\n\tharvestables = {\r\n\t\tHarvestable1,\r\n\t\tHarvestable2,\r\n\t\t...\r\n\t},\r\n\tlifts = {\r\n\t\tLift1,\r\n\t\tLift2,\r\n\t\t...\r\n\t}\r\n}\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"multicast",children:"multicast"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.multicast( casts )\n"})}),"\n",(0,r.jsx)(s.p,{children:"Performs multiple sphere and/or raycasts given a table of parameters."}),"\n",(0,r.jsx)(s.p,{children:'Type can be "sphere" or "ray". Radius is ignored for rays.'}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"casts"})," [",(0,r.jsx)("strong",{children:" table "}),"]: The table of casts to perform. See 'casts' table structure below."]}),"\n"]}),"\n",(0,r.jsx)("strong",{children:"Returns:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsx)("strong",{children:" table "}),"]: An array of tables containing ",(0,r.jsx)("code",{children:"bool"})," and ",(0,r.jsx)("code",{children:"raycastResult"})," for each cast."]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",metastring:"title=\"'casts' Table Structure\"",children:'{\r\n\t{\r\n\t\ttype = "ray",\t\t\t\t\t--The cast type.\r\n\t\tstartPoint = vec3,\t\t\t\t--The start point.\r\n\t\tendPoint = vec3,\t\t\t\t--The end point.\r\n\t\tmask = sm.physics.filter.all\t--The cast filter.\r\n\t},\r\n\t{\r\n\t\ttype = "sphere",\t\t\t\t--The cast type.\r\n\t\tstartPoint = vec3,\t\t\t\t--The start point.\r\n\t\tendPoint = vec3,\t\t\t\t--The end point.\r\n\t\tradius = 5,\t\t\t\t\t\t--The sphere radius.\r\n\t\tmask = sm.physics.filter.all\t--The cast filter.\r\n\t},\r\n\t...\t\t\t\t\t\t\t\t\t--etc.\r\n}\n'})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",metastring:'title="Returned Table Structure"',children:"{\r\n\t{\r\n\t\ttrue,\t\t\t--Whether the cast is valid or not.\r\n\t\traycastResult\t--The cast result data.\r\n\t},\r\n\t{\r\n\t\ttrue,\t\t\t--Whether the cast is valid or not.\r\n\t\traycastResult\t--The cast result data.\r\n\t},\r\n\t...\t\t\t\t\t--etc.\r\n}\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"raycast",children:"raycast"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.raycast( startPos, endPos, body, mask )\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Performs a ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Ray_casting",children:"ray cast"})," between two positions."]}),"\n",(0,r.jsxs)(s.p,{children:["The returned ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Userdata/RaycastResult",children:"RaycastResult"})," contains information about any object intersected by the ray."]}),"\n",(0,r.jsxs)(s.p,{children:["If the ray cast is called from within a shape (e.g. a Sensor), a ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Userdata/Body",children:"Body"})," may be provided which the ray will not intersect."]}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"startPos"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The start position."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"endPos"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The end position."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"body"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Body",children:" Body "})," "]}),"]: The body to ignore. Defaults to none."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"mask"})," [",(0,r.jsx)("strong",{children:" int "}),"]: The collision mask. Defaults to ",(0,r.jsx)("code",{children:"sm.physics.filter.default"}),"."]}),"\n"]}),"\n",(0,r.jsx)("strong",{children:"Returns:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsx)("strong",{children:" bool "}),"]: Whether the raycast is valid or not."]}),"\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/RaycastResult",children:" RaycastResult "})," "]}),"]: The raycast result data."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"raycasttarget",children:"raycastTarget"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.raycastTarget( startPos, endPos, body )\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Performs a ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Ray_casting",children:"ray cast"})," between two positions to find a specific target."]}),"\n",(0,r.jsxs)(s.p,{children:["A target ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Userdata/Body",children:"Body"})," must be provided."]}),"\n",(0,r.jsxs)(s.p,{children:["The returned ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Userdata/RaycastResult",children:"RaycastResult"})," contains information about any object intersected by the ray."]}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"startPos"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The start position."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"endPos"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The end position."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"body"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Body",children:" Body "})," "]}),"]: The body be exclusively checked."]}),"\n"]}),"\n",(0,r.jsx)("strong",{children:"Returns:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsx)("strong",{children:" bool "}),"]: Whether the raycast is valid or not."]}),"\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/RaycastResult",children:" RaycastResult "})," "]}),"]: The raycast result data."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"setgravity",children:"setGravity"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.setGravity( gravity )\n"})}),"\n",(0,r.jsx)("code",{children:"Server-Only"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.p,{children:["Sets the gravitational acceleration affecting ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Userdata/Shape",children:"shapes"})," and ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Userdata/Body",children:"bodies"}),"."]}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"gravity"})," [",(0,r.jsx)("strong",{children:" number "}),"]: The gravitational value."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"spherecontactcount",children:"sphereContactCount"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.sphereContactCount( worldPosition, radius, includeTerrain, countWater )\n"})}),"\n",(0,r.jsx)(s.p,{children:"Returns the number of collision objects that were found inside the given sphere."}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"worldPosition"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The sphere position."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"radius"})," [",(0,r.jsx)("strong",{children:" number "}),"]: The sphere radius."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"includeTerrain"})," [",(0,r.jsx)("strong",{children:" bool "}),"]: Whether terrain should be included in the test. Defaults to false."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"countWater"})," [",(0,r.jsx)("strong",{children:" bool "}),"]: Whether water should be included in the test. Defaults to false."]}),"\n"]}),"\n",(0,r.jsx)("strong",{children:"Returns:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsx)("strong",{children:" number "}),"]: The number of objects."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"spherecast",children:"spherecast"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:"sm.physics.spherecast( startPos, endPos, radius, body, mask )\n"})}),"\n",(0,r.jsxs)(s.p,{children:["Performs a spherical ",(0,r.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Ray_casting",children:"ray cast"})," between two positions."]}),"\n",(0,r.jsxs)(s.p,{children:["The returned ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Userdata/RaycastResult",children:"RaycastResult"})," contains information about any object intersected by the ray."]}),"\n",(0,r.jsxs)(s.p,{children:["If the ray cast is called from within a shape (e.g. a Sensor), a ",(0,r.jsx)(s.a,{href:"/docs/Game-Script-Environment/Userdata/Body",children:"Body"})," may be provided which the ray will not intersect."]}),"\n",(0,r.jsx)("strong",{children:"Arguments:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"startPos"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The start position."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"endPos"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Vec3",children:" Vec3 "})," "]}),"]: The end position."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"radius"})," [",(0,r.jsx)("strong",{children:" number "}),"]: The radius of the sphere."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"body"})," [",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/Body",children:" Body "})," "]}),"]: The body to ignore. Defaults to none."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)("code",{children:"mask"})," [",(0,r.jsx)("strong",{children:" int "}),"]: The collision mask. Defaults to ",(0,r.jsx)("code",{children:"sm.physics.filter.default"}),"."]}),"\n"]}),"\n",(0,r.jsx)("strong",{children:"Returns:"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsx)("strong",{children:" bool "}),"]: Whether the raycast is valid or not."]}),"\n",(0,r.jsxs)(s.li,{children:["[",(0,r.jsxs)("strong",{children:[" ",(0,r.jsx)("a",{href:"/docs/Game-Script-Environment/Userdata/RaycastResult",children:" RaycastResult "})," "]}),"]: The raycast result data."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{})]})}function h(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},1151:(e,s,n)=>{n.d(s,{Z:()=>c,a:()=>a});var r=n(7294);const t={},i=r.createContext(t);function a(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function c(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);